LAB | Connecting Python to SQL

Challenge

In this lab, the objective is to identify the customers who were active in both May and June, and how did their activity differ between months. To achieve this, follow these steps:

1-Establish a connection between Python and the Sakila database.

import pandas as pd
import numpy as np

import pymysql
from sqlalchemy import create_engine

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.metrics import classification_report, f1_score, cohen_kappa_score

import getpass  # To get the password without showing the input

password = getpass.getpass()

import sqlalchemy

print(password)

connection_string = 'mysql+pymysql://root:'+password+'@localhost/sakila'
engine = create_engine(connection_string)
data = pd.read_sql_query('SELECT * FROM rental', engine)
data.head()

2-Write a Python function called rentals_month that retrieves rental data for a given month and year (passed as parameters) from the Sakila database as a Pandas DataFrame. The function should take in three parameters:

engine: an object representing the database connection engine to be used to establish a connection to the Sakila database.
month: an integer representing the month for which rental data is to be retrieved.
year: an integer representing the year for which rental data is to be retrieved.
The function should execute a SQL query to retrieve the rental data for the specified month and year from the rental table in the Sakila database, and return it as a pandas DataFrame.

def rentals_month(engine,month,year):
    # Build the SQL query
    query = f"""
        SELECT *
        FROM rental
        WHERE MONTH(rental_date) = {month} AND YEAR(rental_date) = {year}
    """

    # Execute the query and retrieve the data into a DataFrame
    df = pd.read_sql(query, engine)

    return df

 ---------

 from sqlalchemy import create_engine

# Establish a database connection engine
engine = create_engine('mysql+pymysql://root:1234@localhost/sakila')

# Specify the month and year
month = 5  # May
year = 2005

# Call the function to retrieve rental data
rental_data = rentals_month(engine, month, year)

# Print the DataFrame
print(rental_data)


3-Develop a Python function called rental_count_month that takes the DataFrame provided by rentals_month as input along with the month and year and returns a new DataFrame containing the number of rentals made by each customer_id during the selected month and year.

The function should also include the month and year as parameters and use them to name the new column according to the month and year, for example, if the input month is 05 and the year is 2005, the column name should be "rentals_05_2005".

def rental_count_month(df, month, year):
    rental_count = df.groupby('customer_id').size().reset_index(name=f'rentals_{month}_{year}')
    return rental_count

-----------

# Retrieve rental data for a specific month and year
rental_data = rentals_month(engine, 5, 2005)

# Calculate the rental count for each customer during the specified month and year
rental_count = rental_count_month(rental_data, 5, 2005)

# Print the resulting DataFrame
print(rental_count)

4-Create a Python function called compare_rentals that takes two DataFrames as input containing the number of rentals made by each customer in different months and years. The function should return a combined DataFrame with a new 'difference' column, which is the difference between the number of rentals in the two months.

def compare_rentals(df1, df2):
    # Merge the two DataFrames based on the customer column
    merged_df = pd.merge(df1, df2, on='customer', suffixes=('_month1', '_month2'))
    
    # Calculate the difference between the number of rentals in the two months
    merged_df['difference'] = merged_df['rentals_month2'] - merged_df['rentals_month1']
    
    return merged_df

------------

query1 = '''
SELECT customer_id, COUNT(*) AS num_rentals
FROM rental
WHERE EXTRACT(MONTH FROM rental_date) = 6 -- Specify the month you want
  AND EXTRACT(YEAR FROM rental_date) = 2005 -- Specify the year you want
GROUP BY customer_id
'''

# Query 2: Number of rentals per customer for a different month and year
query2 = '''
SELECT customer_id, COUNT(*) AS num_rentals
FROM rental
WHERE EXTRACT(MONTH FROM rental_date) = 2 -- Specify the month you want
  AND EXTRACT(YEAR FROM rental_date) = 2006 -- Specify the year you want
GROUP BY customer_id
'''

# Execute the queries and fetch the results
df1 = pd.read_sql_query(query1,engine)
df2 = pd.read_sql_query(query2,engine)


# Print the resulting DataFrames
print("DataFrame 1:")
print(df1)

print("\nDataFrame 2:")
print(df2)